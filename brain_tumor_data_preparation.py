# -*- coding: utf-8 -*-
"""Brain_Tumor_Data_preparation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DdmFDkFa-lJjjPHGNH3lEcZUCGFVB1aj
"""

# Commented out IPython magic to ensure Python compatibility.
import os
import zipfile
import pickle
import h5py
import cv2
from google.colab.patches import cv2_imshow
# %matplotlib inline

# Commented out IPython magic to ensure Python compatibility.
import scipy as sp
import numpy as np
import pandas as pd
import PIL
import scipy.ndimage as spi
import matplotlib.pyplot as plt
# %matplotlib inline

from google.colab import drive
drive.mount('/content/drive')

!cd '/content/drive/MyDrive/Colab Notebooks/dataset'

if not os.path.exists('/content/drive/My Drive/Colab Notebooks/dataset'):
  os.mkdir('/content/drive/My Drive/Colab Notebooks/dataset')

!pwd

!ls '/content/drive/My Drive/Colab Notebooks/dataset/'

!cat '/content/drive/My Drive/Colab Notebooks/dataset/README.txt'

with zipfile.ZipFile('/content/drive/My Drive/Colab Notebooks/dataset/brainTumorDataPublic_1766.zip') as zf:
  if not os.path.exists('/content/drive/My Drive/Colab Notebooks/dataset/bt_set1'):
    os.mkdir('/content/drive/My Drive/Colab Notebooks/dataset/bt_set1')
    zip_dir = zf.namelist()[0]
    zf.extractall('/content/drive/My Drive/Colab Notebooks/dataset/bt_set1')

with zipfile.ZipFile('/content/drive/My Drive/Colab Notebooks/dataset/brainTumorDataPublic_7671532.zip') as zf:
  if not os.path.exists('/content/drive/My Drive/Colab Notebooks/dataset/bt_set2'):
    os.mkdir('/content/drive/My Drive/Colab Notebooks/dataset/bt_set2')
    zip_dir = zf.namelist()[0]
    zf.extractall('/content/drive/My Drive/Colab Notebooks/dataset/bt_set2')

with zipfile.ZipFile('/content/drive/MyDrive/Colab Notebooks/dataset/brainTumorDataPublic_15332298.zip') as zf:
  if not os.path.exists('/content/drive/My Drive/Colab Notebooks/dataset/bt_set3'):
    os.mkdir('/content/drive/My Drive/Colab Notebooks/dataset/bt_set3')
    zip_dir = zf.namelist()[0]
    zf.extractall('/content/drive/My Drive/Colab Notebooks/dataset/bt_set3')

with zipfile.ZipFile('/content/drive/MyDrive/Colab Notebooks/dataset/brainTumorDataPublic_22993064.zip') as zf:
  if not os.path.exists('/content/drive/My Drive/Colab Notebooks/dataset/bt_set4'):
    os.mkdir('/content/drive/My Drive/Colab Notebooks/dataset/bt_set4')
    zip_dir = zf.namelist()[0]
    zf.extractall('/content/drive/My Drive/Colab Notebooks/dataset/bt_set4')

if not os.path.exists('/content/drive/My Drive/Colab Notebooks/dataset/imageData'):
  os.mkdir('/content/drive/My Drive/Colab Notebooks/dataset/imageData')
  !mv /content/drive/'My Drive'/'Colab Notebooks'/dataset/bt_set1/*.mat '/content/drive/My Drive/Colab Notebooks/dataset/imageData/'
  !mv /content/drive/'My Drive'/'Colab Notebooks'/dataset/bt_set2/*.mat '/content/drive/My Drive/Colab Notebooks/dataset/imageData/'
  !mv /content/drive/'My Drive'/'Colab Notebooks'/dataset/bt_set3/*.mat '/content/drive/My Drive/Colab Notebooks/dataset/imageData/'
  !mv /content/drive/'My Drive'/'Colab Notebooks'/dataset/bt_set4/*.mat '/content/drive/My Drive/Colab Notebooks/dataset/imageData/'

def show_image(FILE):
  if(int(FILE) > 3064):
    print('file does not exist')
    return
  with h5py.File(f"/content/drive/My Drive/Colab Notebooks/dataset/imageData/" +FILE +".mat", 'r') as f:
      
      img = f['cjdata']['image']
      label = f['cjdata']['label'][0][0]
      tumorBorder = f['cjdata']['tumorBorder'][0]
      mask = f['cjdata']['tumorMask']
      
      img = np.array(img, dtype=np.float32)
      img = img/255
      mask = np.array(mask, dtype=np.float32)
      mask = mask/255
      fig, axes = plt.subplots(1, 2, figsize=(4, 5))
      ax1 = axes[0]
      ax2 = axes[1]
      ax1 = plt.subplot(2,2,1)
      #print(img)
      ax1.set_title(f"Image ")
      ax = plt.axis('off')
      ax1 = plt.imshow(img, cmap='gray')
      #ax1.set(title='Brain Image')
      #fig2 = plt.figure(figsize=(10, 6))
      ax2 = plt.subplot(2,2,2)
      ax2.set_title(f'Mask  ' )
      ax2 = plt.axis('off')
      ax2 = plt.imshow(mask, cmap='gray')
      
      #ax2.set(title = 'Mask Image')
      #print("Image shape: ", img.shape)
      print("Label", label)
      #print("Tumer Border Coords: ", tumorBorder)
      #print("Mask shape: ", mask.shape)

show_image('306')

def print_image(FILE):
  if(int(FILE) > 3064):
    print('file does not exist')
    return
  with h5py.File(f"/content/drive/My Drive/Colab Notebooks/dataset/imageData/" +FILE +".mat", 'r') as f:
      for key in f.keys():
        print(key)
      for item in f.items():
        print(item)
      for key, val in f['cjdata'].items():
        print(key, val)
      img = f['cjdata']['image']
      label = f['cjdata']['label'][0][0]
      tumorBorder = f['cjdata']['tumorBorder'][0]
      mask = f['cjdata']['tumorMask']
      
      
      
      
      print("Image shape: ", img.shape)
      print("Label", label)
      print("Tumer Border Coords: ", tumorBorder)
      print("Mask shape: ", mask.shape)

show_image('365')
print_image('365')

if not os.path.exists('/content/drive/My Drive/Colab Notebooks/dataset/bt_images'):
  os.mkdir('/content/drive/My Drive/Colab Notebooks/dataset/bt_images')

labels = []
training_data = []

file = None
img = None
label = None
for file in range(1, 3065):
  with h5py.File('/content/drive/My Drive/Colab Notebooks/dataset/imageData/{}.mat'.format(file), 'r') as f:
      img = f['cjdata']['image']
      label = f['cjdata']['label'][0][0]
      
      #training_data.append([img, int(label)])

      labels.append(int(label))
      
      #border.append(coord)
      img = np.array(img, dtype=np.float32)
      
      plt.axis('off')
      plt.imsave("/content/drive/My Drive/Colab Notebooks/dataset/bt_images/{}.jpg".format(file), img, cmap='gray')
      
      
print("{} files successfully saved as Training Data".format(file))

if not os.path.exists('/content/drive/My Drive/Colab Notebooks/pickle_bt'):
  os.mkdir('/content/drive/My Drive/Colab Notebooks/pickle_bt')

if not os.path.exists('/content/drive/MyDrive/Colab Notebooks/dataset/BrainTumor/meningioma'):
  os.mkdir('/content/drive/My Drive/Colab Notebooks/dataset/BrainTumor/meningioma/') 
if not os.path.exists('/content/drive/My Drive/Colab Notebooks/dataset/BrainTumor/glioma/'):
  os.mkdir('/content/drive/My Drive/Colab Notebooks/dataset/BrainTumor/glioma/') 
if not os.path.exists('/content/drive/My Drive/Colab Notebooks/dataset/BrainTumor/pituitary/'):
  os.mkdir('/content/drive/My Drive/Colab Notebooks/dataset/BrainTumor/pituitary/')

len(training_data)

label_names = np.array(labels, dtype=np.int64)

def resize_image(img, size=(28,28)):

    h, w = img.shape[:2]
    c = img.shape[2] if len(img.shape)>2 else 1

    if h == w: 
        return cv2.resize(img, size, cv2.INTER_AREA)

    dif = h if h > w else w

    interpolation = cv2.INTER_AREA if dif > (size[0]+size[1])//2 else cv2.INTER_CUBIC

    x_pos = (dif - w)//2
    y_pos = (dif - h)//2

    if len(img.shape) == 2:
        mask = np.zeros((dif, dif), dtype=img.dtype)
        mask[y_pos:y_pos+h, x_pos:x_pos+w] = img[:h, :w]
    else:
        mask = np.zeros((dif, dif, c), dtype=img.dtype)
        mask[y_pos:y_pos+h, x_pos:x_pos+w, :] = img[:h, :w, :]

    return cv2.resize(mask, size, interpolation)

#training_data = []
img = None
label = None
i = None
for i in range(1, 3065):
  img = cv2.imread("/content/drive/My Drive/Colab Notebooks/dataset/bt_images/{}.jpg".format(i), cv2.IMREAD_GRAYSCALE)
  img = cv2.cvtColor(img, cv2.COLOR_GRAY2RGB)
  img = resize_image(img, size = (256, 256))
  label = label_names[i-1]
  if(label) == 1:
    plt.imsave("/content/drive/My Drive/Colab Notebooks/dataset/BrainTumor/meningioma/{}.jpg".format(i), img, cmap='gray')
  if(label) == 2:
    plt.imsave("/content/drive/My Drive/Colab Notebooks/dataset/BrainTumor/glioma/{}.jpg".format(i), img, cmap='gray')
  if(label) == 3:
    plt.imsave("/content/drive/My Drive/Colab Notebooks/dataset/BrainTumor/pituitary/{}.jpg".format(i), img, cmap='gray')
  
  #training_data.append([img, label])

print("shape: {} label: {} | {} samples successfully preprocessed".format(img.shape, label, i))

cv2_imshow(img)

#len(training_data)
len(label_names)